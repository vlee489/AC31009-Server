/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of GamePlayerACharacterStatEditDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameDocument.toObject()`.
 * ```
 * const gameObject = game.toObject();
 * ```
 */
export interface GamePlayerACharacterStatEdit {
  statID?: number;
  edit?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of GamePlayerBCharacterStatEditDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameDocument.toObject()`.
 * ```
 * const gameObject = game.toObject();
 * ```
 */
export interface GamePlayerBCharacterStatEdit {
  statID?: number;
  edit?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of GameMovePlayerAStatDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameMoveDocument.toObject()`.
 * ```
 * const gamemoveObject = gamemove.toObject();
 * ```
 */
export interface GameMovePlayerAStat {
  statID?: number;
  value?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of GameMovePlayerBStatDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameMoveDocument.toObject()`.
 * ```
 * const gamemoveObject = gamemove.toObject();
 * ```
 */
export interface GameMovePlayerBStat {
  statID?: number;
  value?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of GameMoveDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameDocument.toObject()`.
 * ```
 * const gameObject = game.toObject();
 * ```
 */
export interface GameMove {
  moveNumber?: number;
  playerA: {
    moveID?: number;
    stats: GameMovePlayerAStat[];
  };
  playerB: {
    moveID?: number;
    stats: GameMovePlayerBStat[];
  };
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of GameDocument (type alias of `Game`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Game } from "../models"
 * import { GameObject } from "../interfaces/mongoose.gen.ts"
 *
 * const gameObject: GameObject = game.toObject();
 * ```
 */
export type GameObject = Game;

/**
 * Mongoose Method types
 *
 * Use type assertion to ensure Game methods type safety:
 * ```
 * GameSchema.methods = <GameMethods>{ ... };
 * ```
 */
export type GameMethods = {};

/**
 * Mongoose Static types
 *
 * Use type assertion to ensure Game statics type safety:
 * ```
 * GameSchema.statics = <GameStatics>{ ... };
 * ```
 */
export type GameStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Game = mongoose.model<GameDocument, GameModel>("Game", GameSchema);
 * ```
 */
export interface GameModel extends mongoose.Model<GameDocument>, GameStatics {}

/**
 * Mongoose Schema type
 *
 * Assign this type to new Game schema instances:
 * ```
 * const GameSchema: GameSchema = new mongoose.Schema({ ... })
 * ```
 */
export type GameSchema = mongoose.Schema<GameDocument, GameModel>;

/**
 * Lean version of GameDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GameDocument.toObject()`. To avoid conflicts with model names, use the type alias `GameObject`.
 * ```
 * const gameObject = game.toObject();
 * ```
 */
export interface Game {
  joinCode: string;
  playerA: {
    account?: User["_id"] | User;
    character: {
      heroID?: number;
      statEdits: GamePlayerACharacterStatEdit[];
    };
  };
  playerB: {
    account?: User["_id"] | User;
    character: {
      heroID?: number;
      statEdits: GamePlayerBCharacterStatEdit[];
    };
  };
  moves: GameMove[];
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `GameDocument["playerA.character.statEdits"]` element.
 */
export interface GamePlayerACharacterStatEditDocument
  extends mongoose.Types.EmbeddedDocument {
  statID?: number;
  edit?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `GameDocument["playerB.character.statEdits"]` element.
 */
export interface GamePlayerBCharacterStatEditDocument
  extends mongoose.Types.EmbeddedDocument {
  statID?: number;
  edit?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `GameMoveDocument["playerA.stats"]` element.
 */
export interface GameMovePlayerAStatDocument
  extends mongoose.Types.EmbeddedDocument {
  statID?: number;
  value?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `GameMoveDocument["playerB.stats"]` element.
 */
export interface GameMovePlayerBStatDocument
  extends mongoose.Types.EmbeddedDocument {
  statID?: number;
  value?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `GameDocument["moves"]` element.
 */
export interface GameMoveDocument extends mongoose.Types.EmbeddedDocument {
  moveNumber?: number;
  playerA: {
    moveID?: number;
    stats: mongoose.Types.DocumentArray<GameMovePlayerAStatDocument>;
  };
  playerB: {
    moveID?: number;
    stats: mongoose.Types.DocumentArray<GameMovePlayerBStatDocument>;
  };
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Game = mongoose.model<GameDocument, GameModel>("Game", GameSchema);
 * ```
 */
export interface GameDocument
  extends mongoose.Document<mongoose.Types.ObjectId>,
    GameMethods {
  joinCode: string;
  playerA: {
    account?: UserDocument["_id"] | UserDocument;
    character: {
      heroID?: number;
      statEdits: mongoose.Types.DocumentArray<GamePlayerACharacterStatEditDocument>;
    };
  };
  playerB: {
    account?: UserDocument["_id"] | UserDocument;
    character: {
      heroID?: number;
      statEdits: mongoose.Types.DocumentArray<GamePlayerBCharacterStatEditDocument>;
    };
  };
  moves: mongoose.Types.DocumentArray<GameMoveDocument>;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of UserProfileHeroDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export interface UserProfileHero {
  heroID?: number;
  plays?: number;
  wins?: number;
  loses?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Method types
 *
 * Use type assertion to ensure User methods type safety:
 * ```
 * UserSchema.methods = <UserMethods>{ ... };
 * ```
 */
export type UserMethods = {
  validatePassword: (this: UserDocument, ...args: any[]) => any;
};

/**
 * Mongoose Static types
 *
 * Use type assertion to ensure User statics type safety:
 * ```
 * UserSchema.statics = <UserStatics>{ ... };
 * ```
 */
export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export interface UserModel extends mongoose.Model<UserDocument>, UserStatics {}

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<UserDocument, UserModel>;

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export interface User {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  profile: {
    games?: number;
    wins?: number;
    loses?: number;
    heros: UserProfileHero[];
  };
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Embedded Document type
 *
 * Type of `UserDocument["profile.heros"]` element.
 */
export interface UserProfileHeroDocument
  extends mongoose.Types.EmbeddedDocument {
  heroID?: number;
  plays?: number;
  wins?: number;
  loses?: number;
  _id: mongoose.Types.ObjectId;
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export interface UserDocument
  extends mongoose.Document<mongoose.Types.ObjectId>,
    UserMethods {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  profile: {
    games?: number;
    wins?: number;
    loses?: number;
    heros: mongoose.Types.DocumentArray<UserProfileHeroDocument>;
  };
  _id: mongoose.Types.ObjectId;
}
